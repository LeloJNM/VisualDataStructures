import tkinter as tk
from ABP import ArvoreBinariaPesquisa

def draw_node(canvas, node, x, y, distance):
    if node is not None:
        canvas.create_oval(x, y, x+20, y+20)
        canvas.create_text(x+10, y+10, text=str(node.conteudo))
        if node.esq is not None:
            canvas.create_line(x+10, y+20, x-distance+10, y+70)
            draw_node(canvas, node.esq, x-distance, y+70, distance//2)
        if node.dir is not None:
            canvas.create_line(x+10, y+20, x+distance+10, y+70)
            draw_node(canvas, node.dir, x+distance, y+70, distance//2)

def draw_tree(tree):
    root = tk.Tk()
    c = tk.Canvas(root, width=800, height=600)
    c.pack()
    draw_node(c, tree.raiz, 400, 50, 200)
    root.mainloop()

# Para desenhar a Ã¡rvore
#draw_tree(ArvoreBinariaPesquisa)

def remove(self, valor):
    def _remove(raiz, valor):
        if raiz is None:
            return raiz
        if valor < raiz.conteudo:
            raiz.esq = _remove(raiz.esq, valor)
        elif valor > raiz.conteudo:
            raiz.dir = _remove(raiz.dir, valor)
        else:
            if raiz.esq is None:
                temp = raiz.dir
                raiz = None
                return temp
            elif raiz.dir is None:
                temp = raiz.esq
                raiz = None
                return temp
            temp = self.minValueNode(raiz.dir)
            raiz.conteudo = temp.conteudo
            raiz.dir = _remove(raiz.dir, temp.conteudo)
        return raiz

    def minValueNode(node):
        current = node
        while(current.esq is not None):
            current = current.esq
        return current

    self.raiz = _remove(self.raiz, valor)


window.mainloop()